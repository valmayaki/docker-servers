services:
  nodejs:
    image: node-ffmpeg
    build:
      context: node
      dockerfile: Dockerfile
    ports:
      - "3000:3000"

  mysql8:
    image: mysql8
    build:
      context: mysql8
      dockerfile: Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: freedb
    volumes:
      - ./mysql8/data:/var/lib/mysql
    ports:
      - "33068:3306"

  mysql:
    image: mysql
    build:
      context: mysql
      dockerfile: Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_DATABASE: freedb
    volumes:
      - ./mysql/data:/var/lib/mysql
    ports:
      - "33069:3306"

  rabbitmq:
    image: rabbitmq
    build:
      context: rabbitmq
      dockerfile: Dockerfile
    ports:
      - "15672:15672"
      - "5672:5672"

  pgsql:
    image: pgsql
    build:
      context: pgsql
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: freedb
    volumes:
      - ./pgsql/data:/var/lib/postgresql/data
    ports:
      - "54320:5432"
  
  pgadmin:
    image: dpage/pgadmin4
    container_name:  PgAdmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: secret
      PGADMIN_LISTEN_PORT: 80
    ports:
      - 5011:80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    links:
      - pgsql:pgsql-server

  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
        - /var/run/docker.sock:/tmp/docker.sock:ro
        - ~/.certs:/etc/nginx/certs:ro
    networks:
      - nginx-proxy
      - dnsmasq
      - default
    restart: unless-stopped

  redis:
    image: redis
    build:
      context: redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
  
  caddy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    ports:
      - 80:80
      - 443:443
      - 2019:2019
    labels:
      - "caddy=(tls_docker_snippet)"
      - "caddy.tls=/etc/ssl/certs/custom/docker.crt.pem /etc/ssl/private/custom/docker.key.pem"
    environment:
      - CADDY_INGRESS_NETWORKS=caddy
    networks:
      - caddy
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/.certs/docker.crt.pem:/etc/ssl/certs/custom/docker.crt.pem
      - ~/.certs/docker.key.pem:/etc/ssl/private/custom/docker.key.pem
      - caddy_data:/data
      - caddy_data:/config
    restart: unless-stopped

  dnsmasq:
    image: jpillora/dnsmasq
    restart: always
    ports:
      - "10.254.254.254:5330:53/udp"
      - "5380:8080"
    logging:
      # driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./dnsmasq/config/dnsmasq.conf:/etc/dnsmasq.conf
    environment:
      - HTTP_USER=admin
      - HTTP_PASS=admin
    cap_add:
      - NET_ADMIN
    networks:
      - dnsmasq
      - default

  image-registry:
    image: registry:2
    restart: unless-stopped
    ports:
    - "5200:5000"
    volumes:
    - ./image-registry/data:/var/lib/registry
    networks:
    - default
    - nginx-proxy
    environment:
    - VIRTUAL_HOST=image-registry.docker
networks:
  caddy:
    external: true
  nginx-proxy:
    external: true
  dnsmasq:
    external: true
volumes:
  pgsql-data:
  pgadmin-data:
  caddy_data:
